Exercise 2.17.  
Define a procedure last-pair that returns the 
list that contains only the last element of a 
given (nonempty) list:

(last-pair (list 23 72 149 34))
(34)

(define empty-list (list))
(define non-empty-list (list 1 2 3 4))
(
    define (last-pair l)
    (
        if 
        (= (length l) 0) 
        0 
        (list-ref l (- (length l) 1))
    )
)
(
    define (last-pair l)
    (
        if 
        (= (length l) 0) 
        nil
        (list-ref l (- (length l) 1))
    )
)

Exercise 2.19.

(define us-coins (list 50 25 10 5 1))
(define uk-coins (list 100 50 20 10 5 2 1 0.5))

(cc 100 us-coins)
292

(define (cc amount coin-values)
  (cond ((= amount 0) 1)
        ((or (< amount 0) (no-more? coin-values)) 0)
        (else
         (+ (cc amount
                (except-first-denomination coin-values))
            (cc (- amount
                   (first-denomination coin-values))
                coin-values)))))

Define the procedures first-denomination, 
except-first-denomination, and no-more? 
in terms of primitive operations on list structures. 
Does the order of the list coin-values affect the answer 
produced by cc? Why or why not?

Exercise 2.20. 
Use this notation to write a procedure same-parity that takes one or more integers and returns a list of all the arguments that have the same even-odd parity as the first argument. For example,

(same-parity 1 2 3 4 5 6 7)
(1 3 5 7)

(same-parity 2 3 4 5 6 7)
(2 4 6)

; cycle through the list in sequence, then pull out the stuff that is even, 
; building a new list along the way.
(
    define 
    (same-parity x . z)
    (
        define 
        (same-parity-iter x n input-list output-list)
        (
            define (xnor a b)
            (
                or
                (and a b)
                (and (not a) (not b))
            )    
        )
        (
            let (
                (v (list-ref input-list n))
            ) 
            (
                if (= n (length input-list))
                output-list
                (
                    ; add to list if the value at n is the same parity as x
                    if
                    (
                        xnor (even? x) (even? v)
                    )
                    (
                        ; add to output list
                        same-parity-iter x (+ n 1) input-list (append output-list (list v))
                    )
                    (
                        ; move on
                        same-parity-iter x (+ n 1) input-list output-list
                    )
                )
            )
        )
    )
    (
        same-parity-iter x 0 z (list x)
    )
)

Exercise 2.21.  
The procedure square-list takes a list of numbers 
as argument and returns a list of the squares of those 
numbers.

(square-list (list 1 2 3 4))
(1 4 9 16)

Here are two different definitions of square-list. Complete both of them by filling in the missing expressions:

(define (square-list items)
  (if (null? items)
      nil
      (cons <??> <??>)))
(define (square-list items)
  (map <??> <??>))

(
    define (square-list items)
    (map (lambda (x) (* x x)) items)
)

Exercise 2.23. 
(for-each (lambda (x) (newline) (display x))
          (list 57 321 88))
57
321
88

implement for-each

AH!

I've learned so much.

Okay so 

(
    define (test x y)
    (+ y 1)
    (+ y 2)
)

(test 1 2)

This is a valid function, and I'm pretty sure it does execute the y+1
but it only returns y+2

also 

(car list) returns the first of a list
(cdr list) returns the rest of the list beyond n+1

evidently the else condition can run multiple things?

lambdas can also do the same thing?

5 error> (define x (lambda (x) (* x x x)))

;Value: x

5 error> (x 3)

;Value: 27

5 error> (define x (lambda (x) (* x x) (* x x x)))

;Value: x

5 error> (x 3)

;Value: 27

5 error> 

(
    define
    (for-each op items)
    (
        define 
        (op-iter op items) 
        (
            if (null? items)
            #t
            (   
                (
                    lambda ()
                    (op (car items))
                    (
                        op-iter op (cdr items)
                    )
                )
            )
        )
       
       
    )
    (
        op-iter op items
    )
)

(for-each (lambda (x) (display x)) (list 1 2 3 4))

Excerise 2.25
(car (cdr (car (cdr ( cdr a)))))
(car (car a))
car then cdr 6 times?

Exercise 2.26. 
(define x (list 1 2 3))
(define y (list 4 5 6))

What do I think they're going to be?

(1 2 3 4 5 6)
((1 2 3) (4 5 6))
((1 2 3) (4 5 6))

3 error> (define x (list 1 2 3))

;Value: x

3 error> (define y (list 4 5 6))

;Value: y

3 error> (append x y)

;Value: (1 2 3 4 5 6)

3 error> 
(cons x y)

;Value: ((1 2 3) 4 5 6)

3 error> (list x y)

;Value: ((1 2 3) (4 5 6))

3 error>  

skipping back

Exercise 2.30.  
Define a procedure square-tree analogous to the square-list procedure of exercise 2.21. 
That is, square-list should behave as follows:
(square-tree
 (list 1
       (list 2 (list 3 4) 5)
       (list 6 7)))
(1 (4 (9 16) 25) (36 49))

5 error> (define (crawl-square-tree t)
  (define (base-case x) (* x x))
  (define (is-leaf x) (not (pair? x)))
  (if (is-leaf t)
      (base-case t)
      (map (lambda (subtree)
             (crawl-square-tree subtree))
           t)))

;Value: crawl-square-tree

5 error> (crawl-square-tree test-list)

;Value: (1 (4 (9 16) 25) (36 49))

5 error> 

Exercise 2.31.  Abstract your answer to exercise 2.30 to produce a procedure tree-map with the property that square-tree could be defined as

(define (square-tree tree) (tree-map square tree))

(define (tree-map proc t)
  (define (base-case x) (proc t))
  (define (is-leaf x) (not (pair? x)))
  (if (is-leaf t)
      (base-case t)
      (map (lambda (subtree)
             (crawl-square-tree subtree))
           t)))
       
(define (square x) (* x x))

not the bad since I already wrote it to be abstracted for myself.
Exercise 2.32.  We can represent a set as a list of distinct elements, and we can represent the set of all subsets of the set as a list of lists. For example, if the set is (1 2 3), then the set of all subsets is (() (3) (2) (2 3) (1) (1 3) (1 2) (1 2 3)). Complete the following definition of a procedure that generates the set of subsets of a set and give a clear explanation of why it works:

(define (subsets s)
  (if (null? s)
      (list nil)
      (let ((rest (subsets (cdr s))))
        (append rest (map <??> rest)))))
