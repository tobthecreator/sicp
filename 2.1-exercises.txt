Exercise 2.1.  
Define a better version of make-rat that handles 
both positive and negative arguments. 
Make-rat should normalize the sign so that 
if the rational number is positive, 
both the numerator and denominator are 
positive, and if the 
rational number is negative, 
only the numerator is negative.

Okay so this is what they left us, whcih simplifies it down to by GCD.
(define (gcd a b)
  (if (= b 0)
      a
      (gcd b (remainder a b)))
      )


(
    define (make-rat n d)
    (
        let (
            (g (gcd n d))
        )
        (cons (/ n g) (/ d g))
    )
)

I'm going to take it back to a simpler version and then plug this in.

(
    define 
    (
        make-rat n d
    ) 
    (
        cons n d
    )
)

so this is what we originally had.

If both are positive, they're both positive. If it's negative. Only numerator is negative.

so let's think that through. we have four cases.
1. both are positive. -> no action.
2. both are negative. -> both positive.
3. numerator positive, denominator negative. -> numerator negative, denominator positive
4. numerator negative, denominator positive. -> no action.

so that's a lot easier to test for. because there are only two cases where we need to act.

In both cases, we can just take the absolute value of the denominator.

--
okay first i need to experiment for a sec with internal procedures
and variable declaration.

(
    define 
    (f x y)
    (
        define 
        (f-helper a b)
        (
            + (* x (square a))
            (* y b)
            (* a b)
        )
    )
    (
        f-helper 
            (+ 1 (* x y)) 
            (- 1 y)
    )
)

(
    define (make-rat-2 n d)
    (
        define (abs x) (if (< x 0) (- x) x)
    )
    (
        let 
            (
                (test (abs d))
            )
            (
                (+ n d test)
            )
    )
)

// ^ not working

(
    define (make-rat-2 n d)
    (
        define (abs x) (if (< x 0) (- x) x)
    )
    (
        let 
            (
                (test (abs d))
            )
            (+ n test)
    )
)

--

(define (abs x)
  (if (< x 0)
      (- x)
      x))

(
    define (make-rat n d)
    (
        define (abs x) (if (< x 0) (- x) x)
    )
    (
        define (gcd a b) (if (= b 0) a (gcd b (remainder a b)))
    )
    (
        define (opt-make-rat n d) (cons n d )
    )
    (
        define 
        (normalize n d) 
        (
            cond ((and (< n 0)) )
        )
    )
    (
        define (resize rat) (
             (
                let (
                    (n car rat)
                    (d cdr rat)
                    (g (gcd n d))
                )
                (cons (/ n g) (/ d g))
            )
        )
    )
    (
        let 
            (
                (test (abs d))
            )
            (+ n test)
    )
)

(
    define (make-rat n d)
    (
        define (abs x) (if (< x 0) (- x) x)
    )
    (
        define (gcd a b) (if (= b 0) a (gcd b (remainder a b)))
    )
    (
        define (normalize-numer n d) ( if (< (* n d) 0) (- (abs n)) (abs n))
    )
    (
        define (shrink-by-gcd n d) (
            let (
                (g (gcd n d))
            )
            (cons (/ n g) (/ d g))
        )
    )
    (
        let (
            (normalized-n (normalize-numer n d))
            (normalized-d (abs d))
        )
        (
            shrink-by-gcd normalized-n normalized-d
        )
    )
)

;Value: make-rat

8 error> (make-rat 4 5)

;Value: (4 . 5)

8 error> (make-rat 80 100)

;Value: (4 . 5)

8 error> (make-rat -4 5)

;Value: (-4 . 5)

8 error> (make-rat 4 -5)

;Value: (-4 . 5)

8 error> (make-rat -4 -5)

;Value: (4 . 5)

8 error> 

BOOM fucking got it.  That was cool. Learned a lot about let and sub procedures in that one.

How did the big MIT boys do it?  They, as expected did a lot of clever stuff.

I still like mine though, because it treats this as a pipeline. (1) get the signs right. (2) shrink if possible.

Okay, doing this and then taking a break for a bit.

Exercise 2.2.  
Consider the problem of representing line segments in a plane. 
Each segment is represented as a pair of points: 
a starting point and an ending point. 
Define a constructor make-segment and selectors start-segment 
and end-segment that define the representation of segments 
in terms of points. Furthermore, a point can be represented 
as a pair of numbers: the x coordinate and the y coordinate. 
Accordingly, specify a constructor make-point and selectors 
x-point and y-point that define this representation. 
Finally, using your selectors and constructors, 
define a procedure midpoint-segment that takes a 
line segment as argument and returns its midpoint 
(the point whose coordinates are the average of the 
coordinates of the endpoints). To try your procedures, 
you'll need a way to print points:

(define (print-point p)
  (newline)
  (display "(")
  (display (x-point p))
  (display ",")
  (display (y-point p))
  (display ")")
  )

Okay so lines are pairs of points.  L(pA pB).  Points are pairs of coordinates. P(x y)

We want to give a midpoint function a line, and compute the midpoint.

this is easy but annoying lol.

Okay.

// Line
(define (make-line a b) (cons a b))
(define (starting-point line) (car line))
(define (ending-point line) (cdr line))

// Point
(define (make-point x y) (cons x y))
(define (x-point point) (car point))
(define (y-point point) (cdr point))

/*
    M = ((x1 + x2) / 2), ((y1 + y2) / 2)
*/
(
    define 
        (midpoint-of-line line) 
        (
            define (avg x y) (/ (+ x y) 2)
        )

        (
            define (p1) (starting-point line)
        )

        (
            define (p2) (ending-point line)
        )
       
        (
            let (
                (x1 (x-point p1))
                (y1 (y-point p1))
                (x2 (x-point p2))
                (y2 (y-point p2))
               ; (mx (avg x1 x2))
                ;(my (avg y1 y2))
            ) 
            display ((avg x1 x2))
            display ((avg x1 x2))
        )
)



 ; -------
        (
            let (
                (normalized-n (normalize-numer n d))
                (normalized-d (abs d))
            )
            (
                shrink-by-gcd normalized-n normalized-d
            )
        )
        ; -------

(
    define (display-test test) 
        (newline)
        (display "(")
        (display test)
        (display ")")
    
)



(
    midpoint-of-line 
    (
        make-line 
        (make-point 3 3) 
        (make-point 10 10)
    )
)

running into issues with y2

hmm

(cons (cons 9 10) (cons 11 12))

(
    define 
        (midpoint-of-line line) 
        (
            define (avg x y) (/ (+ x y) 2)
        )

        (
            define (p1 line) (starting-point line)
        )

        (
            define (p2 line) (ending-point line)
        )
       
        (
            let (
                (x1 (x-point (p1 line)))
                (y1 (y-point (p1 line)))
                (x2 (x-point (p2 line)))
                (y2 (y-point (p2 line)))
               ; (mx (avg x1 x2))
                ;(my (avg y1 y2))
            ) 
            (
                make-point (avg x1 x2) (avg y1 y2)
            )
        )
)

Okay i got it.  

So a few lessons here. I couldn't have variables read eachother?

I had to make them functions which are basically the same thing.

I also definitely need to shift to using an IDE

Exercise 2.3.  
Implement a representation for rectangles in a plane. 
(Hint: You may want to make use of exercise 2.2.) 
In terms of your constructors and selectors, 
create procedures that compute the perimeter 
and the area of a given rectangle. 
Now implement a different representation for rectangles. 
Can you design your system with suitable abstraction barriers, 
so that the same perimeter and area procedures will work using 
either representation?



I'm not going to do the next one because it bascially repeats.

Exercise 2.4.  
Here is an alternative procedural representation of pairs. 
For this representation, verify that (car (cons x y)) yields x for 
any objects x and y.

(define (cons x y)
  (lambda (m) (m x y)))

(define (car z)
  (z (lambda (p q) p)))

(
    ; a function, cons
    define 
    (cons x y) ; that takes two variables, x and y
    (
        ; a lambda function
        ; (lambda (<formal-parameters>) <body>)
        lambda 
        (m) 
        (m x y)
    )
) ; notably, this lambda doesn't have an argument, it's just waiting to get called by whatever we pass to it I think

(cons 1 2) ; this returns a compound procedure, but does it normally? no, it returns a value.

; so 
; so 
; so!

 (define (car z) 
   (z (lambda (p q) p))) 

; here car is taking in a function, z.  We're then running z with a lambda function that takes parameters x and y from cons and returns p, which i'm assuming we evaluate

; fuck that's a lot

; okay

; okay, starting over


(define (cons x y)
  (lambda (m) (m x y)))

; cons takes params x and y
; it returns a lambda function, which takes a function m
; and then runs function m with params x and y

(define (car z)
  (z (lambda (p q) p)))

; car takes param z
; param z is a function that takes a function with params p and q, then evaluates to p

; so when I call
(define x (cons 1 2))

; what i'm return is
(lambda (m) (m 1 2)) ; a function m that when called will us 1 and 2 as params

; that is a compound procedure, or a function. and since it has two variables, it matches to car

; so when I call car, what i'm actually seeing is

(car x)

; and we're running
((lambda (m) (m 1 2)) (lambda (p q) p))

; lol what the fuck
; okay so the params being passed to the leftmost lambda, is the lambda on the right.  That function on the right
; takes in two params and returns the first one.  Because the lambda on the right. ahh i got it.

; ex lambda funcntion for ref
;> ( ( lambda (a b) (+ (* 2 a) b) ) 5 6)
;16

; fuck that lololol

Exercise 2.5.  
Show that we can represent pairs of 
nonnegative integers using only numbers 
and arithmetic operations if we represent 
the pair a and b as the integer that is 
the product 2^a * 3^b. 

Give the corresponding definitions 
of the procedures cons, car, and cdr.

; not sure how to solve for this one without further help on the basic math of it.
; someone explained in a solution that the idea is to divide by the base you don't want
; until the remainder provider is not 0 any more. When it's not zero, you've factored
; out that entire base, then you can cleanly do a log from there to get the number.

; wild.

; okay understanding remainder
1 ]=> (define z 648)

;Value: z

1 ]=> z

;Value: 648

1 ]=> (remainder 648 2)

;Value: 0

1 ]=> (remainder 81)

; exponential is expt

(
    define 
    (cons a b)
    (
       *
       (expt 2 a)
       (expt 3 b)
    )
)

; okay so we've got cons.

; we're going to need a helper for logs of 
; different bases
(
    define 
    (logb base x)
    (
        /
        (log x)
        (log base)
    )
)

; and now we can solve this iteratively

(
    define
    (car pair)
    (
        ; to get a, we need to get rid of all base 3
        if (= (remainder pair 3) 0) (car (/ pair 3)) (logb 2 pair)
        
    )
)

(
    define
    (cdr pair)
    (
        ; to get a, we need to get rid of all base 3
        if (= (remainder pair 2) 0) (cdr (/ pair 2)) (logb 3 pair)
        
    )
)

(
    define 
    (fetch-base value base-to-remove base-to-fetch)
    (
        if (= (remainder value base-to-remove) 0) (fetch-base (/ value base-to-remove)) (logb base-to-fetch value)    
    )
)

had a problem for about twenty bc i copy pasted and kept car in cdr :/

worked on abstracting for a bit, I think i have the right algo but it's giving me weird errors saying i'm not passing enough args


